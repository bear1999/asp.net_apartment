#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace _NSY.Models
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="apartment")]
	public partial class ApartmentDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void Insertaccount(account instance);
    partial void Updateaccount(account instance);
    partial void Deleteaccount(account instance);
    partial void Inserttickets_text(tickets_text instance);
    partial void Updatetickets_text(tickets_text instance);
    partial void Deletetickets_text(tickets_text instance);
    partial void Insertapartment(apartment instance);
    partial void Updateapartment(apartment instance);
    partial void Deleteapartment(apartment instance);
    partial void Insertapartments_type(apartments_type instance);
    partial void Updateapartments_type(apartments_type instance);
    partial void Deleteapartments_type(apartments_type instance);
    partial void InsertInfoApartment(InfoApartment instance);
    partial void UpdateInfoApartment(InfoApartment instance);
    partial void DeleteInfoApartment(InfoApartment instance);
    partial void InsertInfoBank(InfoBank instance);
    partial void UpdateInfoBank(InfoBank instance);
    partial void DeleteInfoBank(InfoBank instance);
    partial void Insertlog_reasonCancel(log_reasonCancel instance);
    partial void Updatelog_reasonCancel(log_reasonCancel instance);
    partial void Deletelog_reasonCancel(log_reasonCancel instance);
    partial void Insertlog_service(log_service instance);
    partial void Updatelog_service(log_service instance);
    partial void Deletelog_service(log_service instance);
    partial void Insertlogin(login instance);
    partial void Updatelogin(login instance);
    partial void Deletelogin(login instance);
    partial void Insertnotifications_general(notifications_general instance);
    partial void Updatenotifications_general(notifications_general instance);
    partial void Deletenotifications_general(notifications_general instance);
    partial void Insertowner_home(owner_home instance);
    partial void Updateowner_home(owner_home instance);
    partial void Deleteowner_home(owner_home instance);
    partial void Insertposition(position instance);
    partial void Updateposition(position instance);
    partial void Deleteposition(position instance);
    partial void Insertservice(service instance);
    partial void Updateservice(service instance);
    partial void Deleteservice(service instance);
    partial void Insertservices_type(services_type instance);
    partial void Updateservices_type(services_type instance);
    partial void Deleteservices_type(services_type instance);
    partial void InsertstatusGeneral(statusGeneral instance);
    partial void UpdatestatusGeneral(statusGeneral instance);
    partial void DeletestatusGeneral(statusGeneral instance);
    partial void Insertticket(ticket instance);
    partial void Updateticket(ticket instance);
    partial void Deleteticket(ticket instance);
    #endregion
		
		public ApartmentDataContext() : 
				base(global::System.Configuration.ConfigurationManager.ConnectionStrings["apartmentConnectionString"].ConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public ApartmentDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public ApartmentDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public ApartmentDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public ApartmentDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<account> accounts
		{
			get
			{
				return this.GetTable<account>();
			}
		}
		
		public System.Data.Linq.Table<tickets_text> tickets_texts
		{
			get
			{
				return this.GetTable<tickets_text>();
			}
		}
		
		public System.Data.Linq.Table<apartment> apartments
		{
			get
			{
				return this.GetTable<apartment>();
			}
		}
		
		public System.Data.Linq.Table<apartments_type> apartments_types
		{
			get
			{
				return this.GetTable<apartments_type>();
			}
		}
		
		public System.Data.Linq.Table<InfoApartment> InfoApartments
		{
			get
			{
				return this.GetTable<InfoApartment>();
			}
		}
		
		public System.Data.Linq.Table<InfoBank> InfoBanks
		{
			get
			{
				return this.GetTable<InfoBank>();
			}
		}
		
		public System.Data.Linq.Table<log_reasonCancel> log_reasonCancels
		{
			get
			{
				return this.GetTable<log_reasonCancel>();
			}
		}
		
		public System.Data.Linq.Table<log_service> log_services
		{
			get
			{
				return this.GetTable<log_service>();
			}
		}
		
		public System.Data.Linq.Table<login> logins
		{
			get
			{
				return this.GetTable<login>();
			}
		}
		
		public System.Data.Linq.Table<notifications_general> notifications_generals
		{
			get
			{
				return this.GetTable<notifications_general>();
			}
		}
		
		public System.Data.Linq.Table<owner_home> owner_homes
		{
			get
			{
				return this.GetTable<owner_home>();
			}
		}
		
		public System.Data.Linq.Table<position> positions
		{
			get
			{
				return this.GetTable<position>();
			}
		}
		
		public System.Data.Linq.Table<service> services
		{
			get
			{
				return this.GetTable<service>();
			}
		}
		
		public System.Data.Linq.Table<services_type> services_types
		{
			get
			{
				return this.GetTable<services_type>();
			}
		}
		
		public System.Data.Linq.Table<statusGeneral> statusGenerals
		{
			get
			{
				return this.GetTable<statusGeneral>();
			}
		}
		
		public System.Data.Linq.Table<ticket> tickets
		{
			get
			{
				return this.GetTable<ticket>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.accounts")]
	public partial class account : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _idUser;
		
		private string _Username;
		
		private string _Sex;
		
		private System.DateTime _Birthday;
		
		private string _IDCard;
		
		private int _idStaff;
		
		private System.DateTime _lastLogin;
		
		private System.DateTime _RegDate;
		
		private string _Image_Avatar;
		
		private string _Image_IDCard1;
		
		private string _Image_IDCard2;
		
		private EntitySet<login> _logins;
		
		private EntitySet<owner_home> _owner_homes;
		
		private EntityRef<position> _position;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidUserChanging(int value);
    partial void OnidUserChanged();
    partial void OnUsernameChanging(string value);
    partial void OnUsernameChanged();
    partial void OnSexChanging(string value);
    partial void OnSexChanged();
    partial void OnBirthdayChanging(System.DateTime value);
    partial void OnBirthdayChanged();
    partial void OnIDCardChanging(string value);
    partial void OnIDCardChanged();
    partial void OnidStaffChanging(int value);
    partial void OnidStaffChanged();
    partial void OnlastLoginChanging(System.DateTime value);
    partial void OnlastLoginChanged();
    partial void OnRegDateChanging(System.DateTime value);
    partial void OnRegDateChanged();
    partial void OnImage_AvatarChanging(string value);
    partial void OnImage_AvatarChanged();
    partial void OnImage_IDCard1Changing(string value);
    partial void OnImage_IDCard1Changed();
    partial void OnImage_IDCard2Changing(string value);
    partial void OnImage_IDCard2Changed();
    #endregion
		
		public account()
		{
			this._logins = new EntitySet<login>(new Action<login>(this.attach_logins), new Action<login>(this.detach_logins));
			this._owner_homes = new EntitySet<owner_home>(new Action<owner_home>(this.attach_owner_homes), new Action<owner_home>(this.detach_owner_homes));
			this._position = default(EntityRef<position>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_idUser", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int idUser
		{
			get
			{
				return this._idUser;
			}
			set
			{
				if ((this._idUser != value))
				{
					this.OnidUserChanging(value);
					this.SendPropertyChanging();
					this._idUser = value;
					this.SendPropertyChanged("idUser");
					this.OnidUserChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Username", DbType="NVarChar(25) NOT NULL", CanBeNull=false)]
		public string Username
		{
			get
			{
				return this._Username;
			}
			set
			{
				if ((this._Username != value))
				{
					this.OnUsernameChanging(value);
					this.SendPropertyChanging();
					this._Username = value;
					this.SendPropertyChanged("Username");
					this.OnUsernameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Sex", DbType="NVarChar(3) NOT NULL", CanBeNull=false)]
		public string Sex
		{
			get
			{
				return this._Sex;
			}
			set
			{
				if ((this._Sex != value))
				{
					this.OnSexChanging(value);
					this.SendPropertyChanging();
					this._Sex = value;
					this.SendPropertyChanged("Sex");
					this.OnSexChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Birthday", DbType="SmallDateTime NOT NULL")]
		public System.DateTime Birthday
		{
			get
			{
				return this._Birthday;
			}
			set
			{
				if ((this._Birthday != value))
				{
					this.OnBirthdayChanging(value);
					this.SendPropertyChanging();
					this._Birthday = value;
					this.SendPropertyChanged("Birthday");
					this.OnBirthdayChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IDCard", DbType="VarChar(12)")]
		public string IDCard
		{
			get
			{
				return this._IDCard;
			}
			set
			{
				if ((this._IDCard != value))
				{
					this.OnIDCardChanging(value);
					this.SendPropertyChanging();
					this._IDCard = value;
					this.SendPropertyChanged("IDCard");
					this.OnIDCardChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_idStaff", DbType="Int NOT NULL")]
		public int idStaff
		{
			get
			{
				return this._idStaff;
			}
			set
			{
				if ((this._idStaff != value))
				{
					if (this._position.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnidStaffChanging(value);
					this.SendPropertyChanging();
					this._idStaff = value;
					this.SendPropertyChanged("idStaff");
					this.OnidStaffChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_lastLogin", DbType="DateTime NOT NULL")]
		public System.DateTime lastLogin
		{
			get
			{
				return this._lastLogin;
			}
			set
			{
				if ((this._lastLogin != value))
				{
					this.OnlastLoginChanging(value);
					this.SendPropertyChanging();
					this._lastLogin = value;
					this.SendPropertyChanged("lastLogin");
					this.OnlastLoginChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RegDate", DbType="DateTime NOT NULL")]
		public System.DateTime RegDate
		{
			get
			{
				return this._RegDate;
			}
			set
			{
				if ((this._RegDate != value))
				{
					this.OnRegDateChanging(value);
					this.SendPropertyChanging();
					this._RegDate = value;
					this.SendPropertyChanged("RegDate");
					this.OnRegDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Image_Avatar", DbType="NVarChar(MAX)")]
		public string Image_Avatar
		{
			get
			{
				return this._Image_Avatar;
			}
			set
			{
				if ((this._Image_Avatar != value))
				{
					this.OnImage_AvatarChanging(value);
					this.SendPropertyChanging();
					this._Image_Avatar = value;
					this.SendPropertyChanged("Image_Avatar");
					this.OnImage_AvatarChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Image_IDCard1", DbType="NVarChar(MAX)")]
		public string Image_IDCard1
		{
			get
			{
				return this._Image_IDCard1;
			}
			set
			{
				if ((this._Image_IDCard1 != value))
				{
					this.OnImage_IDCard1Changing(value);
					this.SendPropertyChanging();
					this._Image_IDCard1 = value;
					this.SendPropertyChanged("Image_IDCard1");
					this.OnImage_IDCard1Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Image_IDCard2", DbType="NVarChar(MAX)")]
		public string Image_IDCard2
		{
			get
			{
				return this._Image_IDCard2;
			}
			set
			{
				if ((this._Image_IDCard2 != value))
				{
					this.OnImage_IDCard2Changing(value);
					this.SendPropertyChanging();
					this._Image_IDCard2 = value;
					this.SendPropertyChanged("Image_IDCard2");
					this.OnImage_IDCard2Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="account_login", Storage="_logins", ThisKey="idUser", OtherKey="idUser")]
		public EntitySet<login> logins
		{
			get
			{
				return this._logins;
			}
			set
			{
				this._logins.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="account_owner_home", Storage="_owner_homes", ThisKey="idUser", OtherKey="idUser")]
		public EntitySet<owner_home> owner_homes
		{
			get
			{
				return this._owner_homes;
			}
			set
			{
				this._owner_homes.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="position_account", Storage="_position", ThisKey="idStaff", OtherKey="idStaff", IsForeignKey=true)]
		public position position
		{
			get
			{
				return this._position.Entity;
			}
			set
			{
				position previousValue = this._position.Entity;
				if (((previousValue != value) 
							|| (this._position.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._position.Entity = null;
						previousValue.accounts.Remove(this);
					}
					this._position.Entity = value;
					if ((value != null))
					{
						value.accounts.Add(this);
						this._idStaff = value.idStaff;
					}
					else
					{
						this._idStaff = default(int);
					}
					this.SendPropertyChanged("position");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_logins(login entity)
		{
			this.SendPropertyChanging();
			entity.account = this;
		}
		
		private void detach_logins(login entity)
		{
			this.SendPropertyChanging();
			entity.account = null;
		}
		
		private void attach_owner_homes(owner_home entity)
		{
			this.SendPropertyChanging();
			entity.account = this;
		}
		
		private void detach_owner_homes(owner_home entity)
		{
			this.SendPropertyChanging();
			entity.account = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.tickets_text")]
	public partial class tickets_text : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _idtText;
		
		private int _idUser_post;
		
		private System.DateTime _DateSent;
		
		private string _tText;
		
		private int _idTicket;
		
		private EntityRef<ticket> _ticket;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidtTextChanging(int value);
    partial void OnidtTextChanged();
    partial void OnidUser_postChanging(int value);
    partial void OnidUser_postChanged();
    partial void OnDateSentChanging(System.DateTime value);
    partial void OnDateSentChanged();
    partial void OntTextChanging(string value);
    partial void OntTextChanged();
    partial void OnidTicketChanging(int value);
    partial void OnidTicketChanged();
    #endregion
		
		public tickets_text()
		{
			this._ticket = default(EntityRef<ticket>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_idtText", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int idtText
		{
			get
			{
				return this._idtText;
			}
			set
			{
				if ((this._idtText != value))
				{
					this.OnidtTextChanging(value);
					this.SendPropertyChanging();
					this._idtText = value;
					this.SendPropertyChanged("idtText");
					this.OnidtTextChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_idUser_post", DbType="Int NOT NULL")]
		public int idUser_post
		{
			get
			{
				return this._idUser_post;
			}
			set
			{
				if ((this._idUser_post != value))
				{
					this.OnidUser_postChanging(value);
					this.SendPropertyChanging();
					this._idUser_post = value;
					this.SendPropertyChanged("idUser_post");
					this.OnidUser_postChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateSent", DbType="DateTime NOT NULL")]
		public System.DateTime DateSent
		{
			get
			{
				return this._DateSent;
			}
			set
			{
				if ((this._DateSent != value))
				{
					this.OnDateSentChanging(value);
					this.SendPropertyChanging();
					this._DateSent = value;
					this.SendPropertyChanged("DateSent");
					this.OnDateSentChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_tText", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string tText
		{
			get
			{
				return this._tText;
			}
			set
			{
				if ((this._tText != value))
				{
					this.OntTextChanging(value);
					this.SendPropertyChanging();
					this._tText = value;
					this.SendPropertyChanged("tText");
					this.OntTextChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_idTicket", DbType="Int NOT NULL")]
		public int idTicket
		{
			get
			{
				return this._idTicket;
			}
			set
			{
				if ((this._idTicket != value))
				{
					if (this._ticket.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnidTicketChanging(value);
					this.SendPropertyChanging();
					this._idTicket = value;
					this.SendPropertyChanged("idTicket");
					this.OnidTicketChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ticket_tickets_text", Storage="_ticket", ThisKey="idTicket", OtherKey="idTicket", IsForeignKey=true)]
		public ticket ticket
		{
			get
			{
				return this._ticket.Entity;
			}
			set
			{
				ticket previousValue = this._ticket.Entity;
				if (((previousValue != value) 
							|| (this._ticket.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ticket.Entity = null;
						previousValue.tickets_texts.Remove(this);
					}
					this._ticket.Entity = value;
					if ((value != null))
					{
						value.tickets_texts.Add(this);
						this._idTicket = value.idTicket;
					}
					else
					{
						this._idTicket = default(int);
					}
					this.SendPropertyChanged("ticket");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.apartments")]
	public partial class apartment : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _idMain;
		
		private string _name;
		
		private int _statusGeneral;
		
		private int _idSub;
		
		private string _description;
		
		private int _typeApartment;
		
		private System.Nullable<decimal> _Rent;
		
		private System.Nullable<System.DateTime> _DateRent;
		
		private System.Nullable<System.DateTime> _ExpRent;
		
		private System.Nullable<int> _DienTich;
		
		private EntitySet<service> _services;
		
		private EntityRef<apartments_type> _apartments_type;
		
		private EntityRef<statusGeneral> _statusGeneral1;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidMainChanging(int value);
    partial void OnidMainChanged();
    partial void OnnameChanging(string value);
    partial void OnnameChanged();
    partial void OnstatusGeneralChanging(int value);
    partial void OnstatusGeneralChanged();
    partial void OnidSubChanging(int value);
    partial void OnidSubChanged();
    partial void OndescriptionChanging(string value);
    partial void OndescriptionChanged();
    partial void OntypeApartmentChanging(int value);
    partial void OntypeApartmentChanged();
    partial void OnRentChanging(System.Nullable<decimal> value);
    partial void OnRentChanged();
    partial void OnDateRentChanging(System.Nullable<System.DateTime> value);
    partial void OnDateRentChanged();
    partial void OnExpRentChanging(System.Nullable<System.DateTime> value);
    partial void OnExpRentChanged();
    partial void OnDienTichChanging(System.Nullable<int> value);
    partial void OnDienTichChanged();
    #endregion
		
		public apartment()
		{
			this._services = new EntitySet<service>(new Action<service>(this.attach_services), new Action<service>(this.detach_services));
			this._apartments_type = default(EntityRef<apartments_type>);
			this._statusGeneral1 = default(EntityRef<statusGeneral>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_idMain", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int idMain
		{
			get
			{
				return this._idMain;
			}
			set
			{
				if ((this._idMain != value))
				{
					this.OnidMainChanging(value);
					this.SendPropertyChanging();
					this._idMain = value;
					this.SendPropertyChanged("idMain");
					this.OnidMainChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_name", DbType="NVarChar(30) NOT NULL", CanBeNull=false)]
		public string name
		{
			get
			{
				return this._name;
			}
			set
			{
				if ((this._name != value))
				{
					this.OnnameChanging(value);
					this.SendPropertyChanging();
					this._name = value;
					this.SendPropertyChanged("name");
					this.OnnameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_statusGeneral", DbType="Int NOT NULL")]
		public int statusGeneral
		{
			get
			{
				return this._statusGeneral;
			}
			set
			{
				if ((this._statusGeneral != value))
				{
					if (this._statusGeneral1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnstatusGeneralChanging(value);
					this.SendPropertyChanging();
					this._statusGeneral = value;
					this.SendPropertyChanged("statusGeneral");
					this.OnstatusGeneralChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_idSub", DbType="Int NOT NULL")]
		public int idSub
		{
			get
			{
				return this._idSub;
			}
			set
			{
				if ((this._idSub != value))
				{
					this.OnidSubChanging(value);
					this.SendPropertyChanging();
					this._idSub = value;
					this.SendPropertyChanged("idSub");
					this.OnidSubChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_description", DbType="NVarChar(50)")]
		public string description
		{
			get
			{
				return this._description;
			}
			set
			{
				if ((this._description != value))
				{
					this.OndescriptionChanging(value);
					this.SendPropertyChanging();
					this._description = value;
					this.SendPropertyChanged("description");
					this.OndescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_typeApartment", DbType="Int NOT NULL")]
		public int typeApartment
		{
			get
			{
				return this._typeApartment;
			}
			set
			{
				if ((this._typeApartment != value))
				{
					if (this._apartments_type.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OntypeApartmentChanging(value);
					this.SendPropertyChanging();
					this._typeApartment = value;
					this.SendPropertyChanged("typeApartment");
					this.OntypeApartmentChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Rent", DbType="Decimal(19,4)")]
		public System.Nullable<decimal> Rent
		{
			get
			{
				return this._Rent;
			}
			set
			{
				if ((this._Rent != value))
				{
					this.OnRentChanging(value);
					this.SendPropertyChanging();
					this._Rent = value;
					this.SendPropertyChanged("Rent");
					this.OnRentChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateRent", DbType="DateTime")]
		public System.Nullable<System.DateTime> DateRent
		{
			get
			{
				return this._DateRent;
			}
			set
			{
				if ((this._DateRent != value))
				{
					this.OnDateRentChanging(value);
					this.SendPropertyChanging();
					this._DateRent = value;
					this.SendPropertyChanged("DateRent");
					this.OnDateRentChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ExpRent", DbType="DateTime")]
		public System.Nullable<System.DateTime> ExpRent
		{
			get
			{
				return this._ExpRent;
			}
			set
			{
				if ((this._ExpRent != value))
				{
					this.OnExpRentChanging(value);
					this.SendPropertyChanging();
					this._ExpRent = value;
					this.SendPropertyChanged("ExpRent");
					this.OnExpRentChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DienTich", DbType="Int")]
		public System.Nullable<int> DienTich
		{
			get
			{
				return this._DienTich;
			}
			set
			{
				if ((this._DienTich != value))
				{
					this.OnDienTichChanging(value);
					this.SendPropertyChanging();
					this._DienTich = value;
					this.SendPropertyChanged("DienTich");
					this.OnDienTichChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="apartment_service", Storage="_services", ThisKey="idMain", OtherKey="idHome")]
		public EntitySet<service> services
		{
			get
			{
				return this._services;
			}
			set
			{
				this._services.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="apartments_type_apartment", Storage="_apartments_type", ThisKey="typeApartment", OtherKey="idType", IsForeignKey=true)]
		public apartments_type apartments_type
		{
			get
			{
				return this._apartments_type.Entity;
			}
			set
			{
				apartments_type previousValue = this._apartments_type.Entity;
				if (((previousValue != value) 
							|| (this._apartments_type.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._apartments_type.Entity = null;
						previousValue.apartments.Remove(this);
					}
					this._apartments_type.Entity = value;
					if ((value != null))
					{
						value.apartments.Add(this);
						this._typeApartment = value.idType;
					}
					else
					{
						this._typeApartment = default(int);
					}
					this.SendPropertyChanged("apartments_type");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="statusGeneral_apartment", Storage="_statusGeneral1", ThisKey="statusGeneral", OtherKey="idStatus", IsForeignKey=true)]
		public statusGeneral statusGeneral1
		{
			get
			{
				return this._statusGeneral1.Entity;
			}
			set
			{
				statusGeneral previousValue = this._statusGeneral1.Entity;
				if (((previousValue != value) 
							|| (this._statusGeneral1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._statusGeneral1.Entity = null;
						previousValue.apartments.Remove(this);
					}
					this._statusGeneral1.Entity = value;
					if ((value != null))
					{
						value.apartments.Add(this);
						this._statusGeneral = value.idStatus;
					}
					else
					{
						this._statusGeneral = default(int);
					}
					this.SendPropertyChanged("statusGeneral1");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_services(service entity)
		{
			this.SendPropertyChanging();
			entity.apartment = this;
		}
		
		private void detach_services(service entity)
		{
			this.SendPropertyChanging();
			entity.apartment = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.apartments_type")]
	public partial class apartments_type : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _idType;
		
		private string _name_type;
		
		private EntitySet<apartment> _apartments;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidTypeChanging(int value);
    partial void OnidTypeChanged();
    partial void Onname_typeChanging(string value);
    partial void Onname_typeChanged();
    #endregion
		
		public apartments_type()
		{
			this._apartments = new EntitySet<apartment>(new Action<apartment>(this.attach_apartments), new Action<apartment>(this.detach_apartments));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_idType", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int idType
		{
			get
			{
				return this._idType;
			}
			set
			{
				if ((this._idType != value))
				{
					this.OnidTypeChanging(value);
					this.SendPropertyChanging();
					this._idType = value;
					this.SendPropertyChanged("idType");
					this.OnidTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_name_type", DbType="NVarChar(25) NOT NULL", CanBeNull=false)]
		public string name_type
		{
			get
			{
				return this._name_type;
			}
			set
			{
				if ((this._name_type != value))
				{
					this.Onname_typeChanging(value);
					this.SendPropertyChanging();
					this._name_type = value;
					this.SendPropertyChanged("name_type");
					this.Onname_typeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="apartments_type_apartment", Storage="_apartments", ThisKey="idType", OtherKey="typeApartment")]
		public EntitySet<apartment> apartments
		{
			get
			{
				return this._apartments;
			}
			set
			{
				this._apartments.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_apartments(apartment entity)
		{
			this.SendPropertyChanging();
			entity.apartments_type = this;
		}
		
		private void detach_apartments(apartment entity)
		{
			this.SendPropertyChanging();
			entity.apartments_type = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.InfoApartment")]
	public partial class InfoApartment : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id;
		
		private string _nameApartment;
		
		private string _addressApartment;
		
		private string _telApartment;
		
		private string _emailApartment;
		
		private string _tittleNavbar;
		
		private string _imageNavbar;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void OnnameApartmentChanging(string value);
    partial void OnnameApartmentChanged();
    partial void OnaddressApartmentChanging(string value);
    partial void OnaddressApartmentChanged();
    partial void OntelApartmentChanging(string value);
    partial void OntelApartmentChanged();
    partial void OnemailApartmentChanging(string value);
    partial void OnemailApartmentChanged();
    partial void OntittleNavbarChanging(string value);
    partial void OntittleNavbarChanged();
    partial void OnimageNavbarChanging(string value);
    partial void OnimageNavbarChanged();
    #endregion
		
		public InfoApartment()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_nameApartment", DbType="NVarChar(30) NOT NULL", CanBeNull=false)]
		public string nameApartment
		{
			get
			{
				return this._nameApartment;
			}
			set
			{
				if ((this._nameApartment != value))
				{
					this.OnnameApartmentChanging(value);
					this.SendPropertyChanging();
					this._nameApartment = value;
					this.SendPropertyChanged("nameApartment");
					this.OnnameApartmentChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_addressApartment", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string addressApartment
		{
			get
			{
				return this._addressApartment;
			}
			set
			{
				if ((this._addressApartment != value))
				{
					this.OnaddressApartmentChanging(value);
					this.SendPropertyChanging();
					this._addressApartment = value;
					this.SendPropertyChanged("addressApartment");
					this.OnaddressApartmentChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_telApartment", DbType="NVarChar(15) NOT NULL", CanBeNull=false)]
		public string telApartment
		{
			get
			{
				return this._telApartment;
			}
			set
			{
				if ((this._telApartment != value))
				{
					this.OntelApartmentChanging(value);
					this.SendPropertyChanging();
					this._telApartment = value;
					this.SendPropertyChanged("telApartment");
					this.OntelApartmentChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_emailApartment", DbType="VarChar(40) NOT NULL", CanBeNull=false)]
		public string emailApartment
		{
			get
			{
				return this._emailApartment;
			}
			set
			{
				if ((this._emailApartment != value))
				{
					this.OnemailApartmentChanging(value);
					this.SendPropertyChanging();
					this._emailApartment = value;
					this.SendPropertyChanged("emailApartment");
					this.OnemailApartmentChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_tittleNavbar", DbType="NVarChar(15) NOT NULL", CanBeNull=false)]
		public string tittleNavbar
		{
			get
			{
				return this._tittleNavbar;
			}
			set
			{
				if ((this._tittleNavbar != value))
				{
					this.OntittleNavbarChanging(value);
					this.SendPropertyChanging();
					this._tittleNavbar = value;
					this.SendPropertyChanged("tittleNavbar");
					this.OntittleNavbarChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_imageNavbar", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string imageNavbar
		{
			get
			{
				return this._imageNavbar;
			}
			set
			{
				if ((this._imageNavbar != value))
				{
					this.OnimageNavbarChanging(value);
					this.SendPropertyChanging();
					this._imageNavbar = value;
					this.SendPropertyChanged("imageNavbar");
					this.OnimageNavbarChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.InfoBank")]
	public partial class InfoBank : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _idInfoBank;
		
		private string _nameBank;
		
		private string _numberBank;
		
		private string _ChiNhanhBank;
		
		private string _ownerBank;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidInfoBankChanging(int value);
    partial void OnidInfoBankChanged();
    partial void OnnameBankChanging(string value);
    partial void OnnameBankChanged();
    partial void OnnumberBankChanging(string value);
    partial void OnnumberBankChanged();
    partial void OnChiNhanhBankChanging(string value);
    partial void OnChiNhanhBankChanged();
    partial void OnownerBankChanging(string value);
    partial void OnownerBankChanged();
    #endregion
		
		public InfoBank()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_idInfoBank", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int idInfoBank
		{
			get
			{
				return this._idInfoBank;
			}
			set
			{
				if ((this._idInfoBank != value))
				{
					this.OnidInfoBankChanging(value);
					this.SendPropertyChanging();
					this._idInfoBank = value;
					this.SendPropertyChanged("idInfoBank");
					this.OnidInfoBankChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_nameBank", DbType="NVarChar(60) NOT NULL", CanBeNull=false)]
		public string nameBank
		{
			get
			{
				return this._nameBank;
			}
			set
			{
				if ((this._nameBank != value))
				{
					this.OnnameBankChanging(value);
					this.SendPropertyChanging();
					this._nameBank = value;
					this.SendPropertyChanged("nameBank");
					this.OnnameBankChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_numberBank", DbType="NVarChar(20) NOT NULL", CanBeNull=false)]
		public string numberBank
		{
			get
			{
				return this._numberBank;
			}
			set
			{
				if ((this._numberBank != value))
				{
					this.OnnumberBankChanging(value);
					this.SendPropertyChanging();
					this._numberBank = value;
					this.SendPropertyChanged("numberBank");
					this.OnnumberBankChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ChiNhanhBank", DbType="NVarChar(30) NOT NULL", CanBeNull=false)]
		public string ChiNhanhBank
		{
			get
			{
				return this._ChiNhanhBank;
			}
			set
			{
				if ((this._ChiNhanhBank != value))
				{
					this.OnChiNhanhBankChanging(value);
					this.SendPropertyChanging();
					this._ChiNhanhBank = value;
					this.SendPropertyChanged("ChiNhanhBank");
					this.OnChiNhanhBankChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ownerBank", DbType="NVarChar(60) NOT NULL", CanBeNull=false)]
		public string ownerBank
		{
			get
			{
				return this._ownerBank;
			}
			set
			{
				if ((this._ownerBank != value))
				{
					this.OnownerBankChanging(value);
					this.SendPropertyChanging();
					this._ownerBank = value;
					this.SendPropertyChanged("ownerBank");
					this.OnownerBankChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.log_reasonCancel")]
	public partial class log_reasonCancel : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _idLog_Service;
		
		private string _Reason;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidLog_ServiceChanging(int value);
    partial void OnidLog_ServiceChanged();
    partial void OnReasonChanging(string value);
    partial void OnReasonChanged();
    #endregion
		
		public log_reasonCancel()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_idLog_Service", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int idLog_Service
		{
			get
			{
				return this._idLog_Service;
			}
			set
			{
				if ((this._idLog_Service != value))
				{
					this.OnidLog_ServiceChanging(value);
					this.SendPropertyChanging();
					this._idLog_Service = value;
					this.SendPropertyChanged("idLog_Service");
					this.OnidLog_ServiceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Reason", DbType="NVarChar(40) NOT NULL", CanBeNull=false)]
		public string Reason
		{
			get
			{
				return this._Reason;
			}
			set
			{
				if ((this._Reason != value))
				{
					this.OnReasonChanging(value);
					this.SendPropertyChanging();
					this._Reason = value;
					this.SendPropertyChanged("Reason");
					this.OnReasonChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.log_service")]
	public partial class log_service : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _idLogService;
		
		private string _nameService;
		
		private System.DateTime _RegDate;
		
		private System.DateTime _ExpDate;
		
		private double _HeSo;
		
		private decimal _Price;
		
		private string _DonVi;
		
		private bool _type;
		
		private int _idHome;
		
		private bool _CancelOrSave;
		
		private int _idUserCancel;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidLogServiceChanging(int value);
    partial void OnidLogServiceChanged();
    partial void OnnameServiceChanging(string value);
    partial void OnnameServiceChanged();
    partial void OnRegDateChanging(System.DateTime value);
    partial void OnRegDateChanged();
    partial void OnExpDateChanging(System.DateTime value);
    partial void OnExpDateChanged();
    partial void OnHeSoChanging(double value);
    partial void OnHeSoChanged();
    partial void OnPriceChanging(decimal value);
    partial void OnPriceChanged();
    partial void OnDonViChanging(string value);
    partial void OnDonViChanged();
    partial void OntypeChanging(bool value);
    partial void OntypeChanged();
    partial void OnidHomeChanging(int value);
    partial void OnidHomeChanged();
    partial void OnCancelOrSaveChanging(bool value);
    partial void OnCancelOrSaveChanged();
    partial void OnidUserCancelChanging(int value);
    partial void OnidUserCancelChanged();
    #endregion
		
		public log_service()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_idLogService", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int idLogService
		{
			get
			{
				return this._idLogService;
			}
			set
			{
				if ((this._idLogService != value))
				{
					this.OnidLogServiceChanging(value);
					this.SendPropertyChanging();
					this._idLogService = value;
					this.SendPropertyChanged("idLogService");
					this.OnidLogServiceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_nameService", DbType="NVarChar(25) NOT NULL", CanBeNull=false)]
		public string nameService
		{
			get
			{
				return this._nameService;
			}
			set
			{
				if ((this._nameService != value))
				{
					this.OnnameServiceChanging(value);
					this.SendPropertyChanging();
					this._nameService = value;
					this.SendPropertyChanged("nameService");
					this.OnnameServiceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RegDate", DbType="DateTime NOT NULL")]
		public System.DateTime RegDate
		{
			get
			{
				return this._RegDate;
			}
			set
			{
				if ((this._RegDate != value))
				{
					this.OnRegDateChanging(value);
					this.SendPropertyChanging();
					this._RegDate = value;
					this.SendPropertyChanged("RegDate");
					this.OnRegDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ExpDate", DbType="DateTime NOT NULL")]
		public System.DateTime ExpDate
		{
			get
			{
				return this._ExpDate;
			}
			set
			{
				if ((this._ExpDate != value))
				{
					this.OnExpDateChanging(value);
					this.SendPropertyChanging();
					this._ExpDate = value;
					this.SendPropertyChanged("ExpDate");
					this.OnExpDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_HeSo", DbType="Float NOT NULL")]
		public double HeSo
		{
			get
			{
				return this._HeSo;
			}
			set
			{
				if ((this._HeSo != value))
				{
					this.OnHeSoChanging(value);
					this.SendPropertyChanging();
					this._HeSo = value;
					this.SendPropertyChanged("HeSo");
					this.OnHeSoChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Price", DbType="Decimal(19,4) NOT NULL")]
		public decimal Price
		{
			get
			{
				return this._Price;
			}
			set
			{
				if ((this._Price != value))
				{
					this.OnPriceChanging(value);
					this.SendPropertyChanging();
					this._Price = value;
					this.SendPropertyChanged("Price");
					this.OnPriceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DonVi", DbType="VarChar(10)")]
		public string DonVi
		{
			get
			{
				return this._DonVi;
			}
			set
			{
				if ((this._DonVi != value))
				{
					this.OnDonViChanging(value);
					this.SendPropertyChanging();
					this._DonVi = value;
					this.SendPropertyChanged("DonVi");
					this.OnDonViChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_type", DbType="Bit NOT NULL")]
		public bool type
		{
			get
			{
				return this._type;
			}
			set
			{
				if ((this._type != value))
				{
					this.OntypeChanging(value);
					this.SendPropertyChanging();
					this._type = value;
					this.SendPropertyChanged("type");
					this.OntypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_idHome", DbType="Int NOT NULL")]
		public int idHome
		{
			get
			{
				return this._idHome;
			}
			set
			{
				if ((this._idHome != value))
				{
					this.OnidHomeChanging(value);
					this.SendPropertyChanging();
					this._idHome = value;
					this.SendPropertyChanged("idHome");
					this.OnidHomeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CancelOrSave", DbType="Bit NOT NULL")]
		public bool CancelOrSave
		{
			get
			{
				return this._CancelOrSave;
			}
			set
			{
				if ((this._CancelOrSave != value))
				{
					this.OnCancelOrSaveChanging(value);
					this.SendPropertyChanging();
					this._CancelOrSave = value;
					this.SendPropertyChanged("CancelOrSave");
					this.OnCancelOrSaveChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_idUserCancel", DbType="Int NOT NULL")]
		public int idUserCancel
		{
			get
			{
				return this._idUserCancel;
			}
			set
			{
				if ((this._idUserCancel != value))
				{
					this.OnidUserCancelChanging(value);
					this.SendPropertyChanging();
					this._idUserCancel = value;
					this.SendPropertyChanged("idUserCancel");
					this.OnidUserCancelChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.login")]
	public partial class login : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id;
		
		private int _idUser;
		
		private string _Email;
		
		private string _Password;
		
		private string _PhoneNumber;
		
		private EntityRef<account> _account;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void OnidUserChanging(int value);
    partial void OnidUserChanged();
    partial void OnEmailChanging(string value);
    partial void OnEmailChanged();
    partial void OnPasswordChanging(string value);
    partial void OnPasswordChanged();
    partial void OnPhoneNumberChanging(string value);
    partial void OnPhoneNumberChanged();
    #endregion
		
		public login()
		{
			this._account = default(EntityRef<account>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_idUser", DbType="Int NOT NULL")]
		public int idUser
		{
			get
			{
				return this._idUser;
			}
			set
			{
				if ((this._idUser != value))
				{
					if (this._account.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnidUserChanging(value);
					this.SendPropertyChanging();
					this._idUser = value;
					this.SendPropertyChanged("idUser");
					this.OnidUserChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Email", DbType="VarChar(50)")]
		public string Email
		{
			get
			{
				return this._Email;
			}
			set
			{
				if ((this._Email != value))
				{
					this.OnEmailChanging(value);
					this.SendPropertyChanging();
					this._Email = value;
					this.SendPropertyChanged("Email");
					this.OnEmailChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Password", DbType="VarChar(32)")]
		public string Password
		{
			get
			{
				return this._Password;
			}
			set
			{
				if ((this._Password != value))
				{
					this.OnPasswordChanging(value);
					this.SendPropertyChanging();
					this._Password = value;
					this.SendPropertyChanged("Password");
					this.OnPasswordChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PhoneNumber", DbType="VarChar(15)")]
		public string PhoneNumber
		{
			get
			{
				return this._PhoneNumber;
			}
			set
			{
				if ((this._PhoneNumber != value))
				{
					this.OnPhoneNumberChanging(value);
					this.SendPropertyChanging();
					this._PhoneNumber = value;
					this.SendPropertyChanged("PhoneNumber");
					this.OnPhoneNumberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="account_login", Storage="_account", ThisKey="idUser", OtherKey="idUser", IsForeignKey=true)]
		public account account
		{
			get
			{
				return this._account.Entity;
			}
			set
			{
				account previousValue = this._account.Entity;
				if (((previousValue != value) 
							|| (this._account.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._account.Entity = null;
						previousValue.logins.Remove(this);
					}
					this._account.Entity = value;
					if ((value != null))
					{
						value.logins.Add(this);
						this._idUser = value.idUser;
					}
					else
					{
						this._idUser = default(int);
					}
					this.SendPropertyChanged("account");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.notifications_general")]
	public partial class notifications_general : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _idNotify;
		
		private string _notify;
		
		private System.DateTime _date_submited;
		
		private int _idUser;
		
		private int _typeUser;
		
		private EntityRef<position> _position;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidNotifyChanging(int value);
    partial void OnidNotifyChanged();
    partial void OnnotifyChanging(string value);
    partial void OnnotifyChanged();
    partial void Ondate_submitedChanging(System.DateTime value);
    partial void Ondate_submitedChanged();
    partial void OnidUserChanging(int value);
    partial void OnidUserChanged();
    partial void OntypeUserChanging(int value);
    partial void OntypeUserChanged();
    #endregion
		
		public notifications_general()
		{
			this._position = default(EntityRef<position>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_idNotify", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int idNotify
		{
			get
			{
				return this._idNotify;
			}
			set
			{
				if ((this._idNotify != value))
				{
					this.OnidNotifyChanging(value);
					this.SendPropertyChanging();
					this._idNotify = value;
					this.SendPropertyChanged("idNotify");
					this.OnidNotifyChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_notify", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string notify
		{
			get
			{
				return this._notify;
			}
			set
			{
				if ((this._notify != value))
				{
					this.OnnotifyChanging(value);
					this.SendPropertyChanging();
					this._notify = value;
					this.SendPropertyChanged("notify");
					this.OnnotifyChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_date_submited", DbType="DateTime NOT NULL")]
		public System.DateTime date_submited
		{
			get
			{
				return this._date_submited;
			}
			set
			{
				if ((this._date_submited != value))
				{
					this.Ondate_submitedChanging(value);
					this.SendPropertyChanging();
					this._date_submited = value;
					this.SendPropertyChanged("date_submited");
					this.Ondate_submitedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_idUser", DbType="Int NOT NULL")]
		public int idUser
		{
			get
			{
				return this._idUser;
			}
			set
			{
				if ((this._idUser != value))
				{
					this.OnidUserChanging(value);
					this.SendPropertyChanging();
					this._idUser = value;
					this.SendPropertyChanged("idUser");
					this.OnidUserChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_typeUser", DbType="Int NOT NULL")]
		public int typeUser
		{
			get
			{
				return this._typeUser;
			}
			set
			{
				if ((this._typeUser != value))
				{
					if (this._position.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OntypeUserChanging(value);
					this.SendPropertyChanging();
					this._typeUser = value;
					this.SendPropertyChanged("typeUser");
					this.OntypeUserChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="position_notifications_general", Storage="_position", ThisKey="typeUser", OtherKey="idStaff", IsForeignKey=true)]
		public position position
		{
			get
			{
				return this._position.Entity;
			}
			set
			{
				position previousValue = this._position.Entity;
				if (((previousValue != value) 
							|| (this._position.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._position.Entity = null;
						previousValue.notifications_generals.Remove(this);
					}
					this._position.Entity = value;
					if ((value != null))
					{
						value.notifications_generals.Add(this);
						this._typeUser = value.idStaff;
					}
					else
					{
						this._typeUser = default(int);
					}
					this.SendPropertyChanged("position");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.owner_home")]
	public partial class owner_home : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id;
		
		private int _idUser;
		
		private int _idHome;
		
		private EntityRef<account> _account;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void OnidUserChanging(int value);
    partial void OnidUserChanged();
    partial void OnidHomeChanging(int value);
    partial void OnidHomeChanged();
    #endregion
		
		public owner_home()
		{
			this._account = default(EntityRef<account>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_idUser", DbType="Int NOT NULL")]
		public int idUser
		{
			get
			{
				return this._idUser;
			}
			set
			{
				if ((this._idUser != value))
				{
					if (this._account.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnidUserChanging(value);
					this.SendPropertyChanging();
					this._idUser = value;
					this.SendPropertyChanged("idUser");
					this.OnidUserChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_idHome", DbType="Int NOT NULL")]
		public int idHome
		{
			get
			{
				return this._idHome;
			}
			set
			{
				if ((this._idHome != value))
				{
					this.OnidHomeChanging(value);
					this.SendPropertyChanging();
					this._idHome = value;
					this.SendPropertyChanged("idHome");
					this.OnidHomeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="account_owner_home", Storage="_account", ThisKey="idUser", OtherKey="idUser", IsForeignKey=true)]
		public account account
		{
			get
			{
				return this._account.Entity;
			}
			set
			{
				account previousValue = this._account.Entity;
				if (((previousValue != value) 
							|| (this._account.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._account.Entity = null;
						previousValue.owner_homes.Remove(this);
					}
					this._account.Entity = value;
					if ((value != null))
					{
						value.owner_homes.Add(this);
						this._idUser = value.idUser;
					}
					else
					{
						this._idUser = default(int);
					}
					this.SendPropertyChanged("account");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.position")]
	public partial class position : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _idStaff;
		
		private string _name_position;
		
		private int _idLevel;
		
		private EntitySet<account> _accounts;
		
		private EntitySet<notifications_general> _notifications_generals;
		
		private EntitySet<ticket> _tickets;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidStaffChanging(int value);
    partial void OnidStaffChanged();
    partial void Onname_positionChanging(string value);
    partial void Onname_positionChanged();
    partial void OnidLevelChanging(int value);
    partial void OnidLevelChanged();
    #endregion
		
		public position()
		{
			this._accounts = new EntitySet<account>(new Action<account>(this.attach_accounts), new Action<account>(this.detach_accounts));
			this._notifications_generals = new EntitySet<notifications_general>(new Action<notifications_general>(this.attach_notifications_generals), new Action<notifications_general>(this.detach_notifications_generals));
			this._tickets = new EntitySet<ticket>(new Action<ticket>(this.attach_tickets), new Action<ticket>(this.detach_tickets));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_idStaff", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int idStaff
		{
			get
			{
				return this._idStaff;
			}
			set
			{
				if ((this._idStaff != value))
				{
					this.OnidStaffChanging(value);
					this.SendPropertyChanging();
					this._idStaff = value;
					this.SendPropertyChanged("idStaff");
					this.OnidStaffChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_name_position", DbType="NVarChar(25) NOT NULL", CanBeNull=false)]
		public string name_position
		{
			get
			{
				return this._name_position;
			}
			set
			{
				if ((this._name_position != value))
				{
					this.Onname_positionChanging(value);
					this.SendPropertyChanging();
					this._name_position = value;
					this.SendPropertyChanged("name_position");
					this.Onname_positionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_idLevel", DbType="Int NOT NULL")]
		public int idLevel
		{
			get
			{
				return this._idLevel;
			}
			set
			{
				if ((this._idLevel != value))
				{
					this.OnidLevelChanging(value);
					this.SendPropertyChanging();
					this._idLevel = value;
					this.SendPropertyChanged("idLevel");
					this.OnidLevelChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="position_account", Storage="_accounts", ThisKey="idStaff", OtherKey="idStaff")]
		public EntitySet<account> accounts
		{
			get
			{
				return this._accounts;
			}
			set
			{
				this._accounts.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="position_notifications_general", Storage="_notifications_generals", ThisKey="idStaff", OtherKey="typeUser")]
		public EntitySet<notifications_general> notifications_generals
		{
			get
			{
				return this._notifications_generals;
			}
			set
			{
				this._notifications_generals.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="position_ticket", Storage="_tickets", ThisKey="idStaff", OtherKey="typeTicket")]
		public EntitySet<ticket> tickets
		{
			get
			{
				return this._tickets;
			}
			set
			{
				this._tickets.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_accounts(account entity)
		{
			this.SendPropertyChanging();
			entity.position = this;
		}
		
		private void detach_accounts(account entity)
		{
			this.SendPropertyChanging();
			entity.position = null;
		}
		
		private void attach_notifications_generals(notifications_general entity)
		{
			this.SendPropertyChanging();
			entity.position = this;
		}
		
		private void detach_notifications_generals(notifications_general entity)
		{
			this.SendPropertyChanging();
			entity.position = null;
		}
		
		private void attach_tickets(ticket entity)
		{
			this.SendPropertyChanging();
			entity.position = this;
		}
		
		private void detach_tickets(ticket entity)
		{
			this.SendPropertyChanging();
			entity.position = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.services")]
	public partial class service : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _idService;
		
		private System.DateTime _RegDate;
		
		private System.DateTime _ExpDate;
		
		private int _serviceType;
		
		private int _idHome;
		
		private double _value;
		
		private EntityRef<apartment> _apartment;
		
		private EntityRef<services_type> _services_type;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidServiceChanging(int value);
    partial void OnidServiceChanged();
    partial void OnRegDateChanging(System.DateTime value);
    partial void OnRegDateChanged();
    partial void OnExpDateChanging(System.DateTime value);
    partial void OnExpDateChanged();
    partial void OnserviceTypeChanging(int value);
    partial void OnserviceTypeChanged();
    partial void OnidHomeChanging(int value);
    partial void OnidHomeChanged();
    partial void OnvalueChanging(double value);
    partial void OnvalueChanged();
    #endregion
		
		public service()
		{
			this._apartment = default(EntityRef<apartment>);
			this._services_type = default(EntityRef<services_type>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_idService", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int idService
		{
			get
			{
				return this._idService;
			}
			set
			{
				if ((this._idService != value))
				{
					this.OnidServiceChanging(value);
					this.SendPropertyChanging();
					this._idService = value;
					this.SendPropertyChanged("idService");
					this.OnidServiceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RegDate", DbType="DateTime NOT NULL")]
		public System.DateTime RegDate
		{
			get
			{
				return this._RegDate;
			}
			set
			{
				if ((this._RegDate != value))
				{
					this.OnRegDateChanging(value);
					this.SendPropertyChanging();
					this._RegDate = value;
					this.SendPropertyChanged("RegDate");
					this.OnRegDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ExpDate", DbType="DateTime NOT NULL")]
		public System.DateTime ExpDate
		{
			get
			{
				return this._ExpDate;
			}
			set
			{
				if ((this._ExpDate != value))
				{
					this.OnExpDateChanging(value);
					this.SendPropertyChanging();
					this._ExpDate = value;
					this.SendPropertyChanged("ExpDate");
					this.OnExpDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_serviceType", DbType="Int NOT NULL")]
		public int serviceType
		{
			get
			{
				return this._serviceType;
			}
			set
			{
				if ((this._serviceType != value))
				{
					if (this._services_type.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnserviceTypeChanging(value);
					this.SendPropertyChanging();
					this._serviceType = value;
					this.SendPropertyChanged("serviceType");
					this.OnserviceTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_idHome", DbType="Int NOT NULL")]
		public int idHome
		{
			get
			{
				return this._idHome;
			}
			set
			{
				if ((this._idHome != value))
				{
					if (this._apartment.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnidHomeChanging(value);
					this.SendPropertyChanging();
					this._idHome = value;
					this.SendPropertyChanged("idHome");
					this.OnidHomeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_value", DbType="Float NOT NULL")]
		public double value
		{
			get
			{
				return this._value;
			}
			set
			{
				if ((this._value != value))
				{
					this.OnvalueChanging(value);
					this.SendPropertyChanging();
					this._value = value;
					this.SendPropertyChanged("value");
					this.OnvalueChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="apartment_service", Storage="_apartment", ThisKey="idHome", OtherKey="idMain", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public apartment apartment
		{
			get
			{
				return this._apartment.Entity;
			}
			set
			{
				apartment previousValue = this._apartment.Entity;
				if (((previousValue != value) 
							|| (this._apartment.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._apartment.Entity = null;
						previousValue.services.Remove(this);
					}
					this._apartment.Entity = value;
					if ((value != null))
					{
						value.services.Add(this);
						this._idHome = value.idMain;
					}
					else
					{
						this._idHome = default(int);
					}
					this.SendPropertyChanged("apartment");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="services_type_service", Storage="_services_type", ThisKey="serviceType", OtherKey="serviceType", IsForeignKey=true)]
		public services_type services_type
		{
			get
			{
				return this._services_type.Entity;
			}
			set
			{
				services_type previousValue = this._services_type.Entity;
				if (((previousValue != value) 
							|| (this._services_type.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._services_type.Entity = null;
						previousValue.services.Remove(this);
					}
					this._services_type.Entity = value;
					if ((value != null))
					{
						value.services.Add(this);
						this._serviceType = value.serviceType;
					}
					else
					{
						this._serviceType = default(int);
					}
					this.SendPropertyChanged("services_type");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.services_type")]
	public partial class services_type : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _serviceType;
		
		private string _name_service;
		
		private string _description;
		
		private decimal _Price;
		
		private bool _type;
		
		private string _DonVi;
		
		private EntitySet<service> _services;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnserviceTypeChanging(int value);
    partial void OnserviceTypeChanged();
    partial void Onname_serviceChanging(string value);
    partial void Onname_serviceChanged();
    partial void OndescriptionChanging(string value);
    partial void OndescriptionChanged();
    partial void OnPriceChanging(decimal value);
    partial void OnPriceChanged();
    partial void OntypeChanging(bool value);
    partial void OntypeChanged();
    partial void OnDonViChanging(string value);
    partial void OnDonViChanged();
    #endregion
		
		public services_type()
		{
			this._services = new EntitySet<service>(new Action<service>(this.attach_services), new Action<service>(this.detach_services));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_serviceType", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int serviceType
		{
			get
			{
				return this._serviceType;
			}
			set
			{
				if ((this._serviceType != value))
				{
					this.OnserviceTypeChanging(value);
					this.SendPropertyChanging();
					this._serviceType = value;
					this.SendPropertyChanged("serviceType");
					this.OnserviceTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_name_service", DbType="NVarChar(25) NOT NULL", CanBeNull=false)]
		public string name_service
		{
			get
			{
				return this._name_service;
			}
			set
			{
				if ((this._name_service != value))
				{
					this.Onname_serviceChanging(value);
					this.SendPropertyChanging();
					this._name_service = value;
					this.SendPropertyChanged("name_service");
					this.Onname_serviceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_description", DbType="NVarChar(200)")]
		public string description
		{
			get
			{
				return this._description;
			}
			set
			{
				if ((this._description != value))
				{
					this.OndescriptionChanging(value);
					this.SendPropertyChanging();
					this._description = value;
					this.SendPropertyChanged("description");
					this.OndescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Price", DbType="Decimal(19,4) NOT NULL")]
		public decimal Price
		{
			get
			{
				return this._Price;
			}
			set
			{
				if ((this._Price != value))
				{
					this.OnPriceChanging(value);
					this.SendPropertyChanging();
					this._Price = value;
					this.SendPropertyChanged("Price");
					this.OnPriceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_type", DbType="Bit NOT NULL")]
		public bool type
		{
			get
			{
				return this._type;
			}
			set
			{
				if ((this._type != value))
				{
					this.OntypeChanging(value);
					this.SendPropertyChanging();
					this._type = value;
					this.SendPropertyChanged("type");
					this.OntypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DonVi", DbType="VarChar(10)")]
		public string DonVi
		{
			get
			{
				return this._DonVi;
			}
			set
			{
				if ((this._DonVi != value))
				{
					this.OnDonViChanging(value);
					this.SendPropertyChanging();
					this._DonVi = value;
					this.SendPropertyChanged("DonVi");
					this.OnDonViChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="services_type_service", Storage="_services", ThisKey="serviceType", OtherKey="serviceType")]
		public EntitySet<service> services
		{
			get
			{
				return this._services;
			}
			set
			{
				this._services.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_services(service entity)
		{
			this.SendPropertyChanging();
			entity.services_type = this;
		}
		
		private void detach_services(service entity)
		{
			this.SendPropertyChanging();
			entity.services_type = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.statusGeneral")]
	public partial class statusGeneral : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _idStatus;
		
		private string _nameStatus;
		
		private int _idGroup;
		
		private EntitySet<apartment> _apartments;
		
		private EntitySet<ticket> _tickets;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidStatusChanging(int value);
    partial void OnidStatusChanged();
    partial void OnnameStatusChanging(string value);
    partial void OnnameStatusChanged();
    partial void OnidGroupChanging(int value);
    partial void OnidGroupChanged();
    #endregion
		
		public statusGeneral()
		{
			this._apartments = new EntitySet<apartment>(new Action<apartment>(this.attach_apartments), new Action<apartment>(this.detach_apartments));
			this._tickets = new EntitySet<ticket>(new Action<ticket>(this.attach_tickets), new Action<ticket>(this.detach_tickets));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_idStatus", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int idStatus
		{
			get
			{
				return this._idStatus;
			}
			set
			{
				if ((this._idStatus != value))
				{
					this.OnidStatusChanging(value);
					this.SendPropertyChanging();
					this._idStatus = value;
					this.SendPropertyChanged("idStatus");
					this.OnidStatusChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_nameStatus", DbType="NVarChar(25) NOT NULL", CanBeNull=false)]
		public string nameStatus
		{
			get
			{
				return this._nameStatus;
			}
			set
			{
				if ((this._nameStatus != value))
				{
					this.OnnameStatusChanging(value);
					this.SendPropertyChanging();
					this._nameStatus = value;
					this.SendPropertyChanged("nameStatus");
					this.OnnameStatusChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_idGroup", DbType="Int NOT NULL")]
		public int idGroup
		{
			get
			{
				return this._idGroup;
			}
			set
			{
				if ((this._idGroup != value))
				{
					this.OnidGroupChanging(value);
					this.SendPropertyChanging();
					this._idGroup = value;
					this.SendPropertyChanged("idGroup");
					this.OnidGroupChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="statusGeneral_apartment", Storage="_apartments", ThisKey="idStatus", OtherKey="statusGeneral")]
		public EntitySet<apartment> apartments
		{
			get
			{
				return this._apartments;
			}
			set
			{
				this._apartments.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="statusGeneral_ticket", Storage="_tickets", ThisKey="idStatus", OtherKey="idtStatus")]
		public EntitySet<ticket> tickets
		{
			get
			{
				return this._tickets;
			}
			set
			{
				this._tickets.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_apartments(apartment entity)
		{
			this.SendPropertyChanging();
			entity.statusGeneral1 = this;
		}
		
		private void detach_apartments(apartment entity)
		{
			this.SendPropertyChanging();
			entity.statusGeneral1 = null;
		}
		
		private void attach_tickets(ticket entity)
		{
			this.SendPropertyChanging();
			entity.statusGeneral = this;
		}
		
		private void detach_tickets(ticket entity)
		{
			this.SendPropertyChanging();
			entity.statusGeneral = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.tickets")]
	public partial class ticket : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _idTicket;
		
		private int _typeTicket;
		
		private System.DateTime _DateCreate;
		
		private int _idtStatus;
		
		private string _TittleTicket;
		
		private int _idUserCreate;
		
		private int _idUsetLastPost;
		
		private bool _Closed;
		
		private EntitySet<tickets_text> _tickets_texts;
		
		private EntityRef<statusGeneral> _statusGeneral;
		
		private EntityRef<position> _position;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidTicketChanging(int value);
    partial void OnidTicketChanged();
    partial void OntypeTicketChanging(int value);
    partial void OntypeTicketChanged();
    partial void OnDateCreateChanging(System.DateTime value);
    partial void OnDateCreateChanged();
    partial void OnidtStatusChanging(int value);
    partial void OnidtStatusChanged();
    partial void OnTittleTicketChanging(string value);
    partial void OnTittleTicketChanged();
    partial void OnidUserCreateChanging(int value);
    partial void OnidUserCreateChanged();
    partial void OnidUsetLastPostChanging(int value);
    partial void OnidUsetLastPostChanged();
    partial void OnClosedChanging(bool value);
    partial void OnClosedChanged();
    #endregion
		
		public ticket()
		{
			this._tickets_texts = new EntitySet<tickets_text>(new Action<tickets_text>(this.attach_tickets_texts), new Action<tickets_text>(this.detach_tickets_texts));
			this._statusGeneral = default(EntityRef<statusGeneral>);
			this._position = default(EntityRef<position>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_idTicket", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int idTicket
		{
			get
			{
				return this._idTicket;
			}
			set
			{
				if ((this._idTicket != value))
				{
					this.OnidTicketChanging(value);
					this.SendPropertyChanging();
					this._idTicket = value;
					this.SendPropertyChanged("idTicket");
					this.OnidTicketChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_typeTicket", DbType="Int NOT NULL")]
		public int typeTicket
		{
			get
			{
				return this._typeTicket;
			}
			set
			{
				if ((this._typeTicket != value))
				{
					if (this._position.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OntypeTicketChanging(value);
					this.SendPropertyChanging();
					this._typeTicket = value;
					this.SendPropertyChanged("typeTicket");
					this.OntypeTicketChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateCreate", DbType="DateTime NOT NULL")]
		public System.DateTime DateCreate
		{
			get
			{
				return this._DateCreate;
			}
			set
			{
				if ((this._DateCreate != value))
				{
					this.OnDateCreateChanging(value);
					this.SendPropertyChanging();
					this._DateCreate = value;
					this.SendPropertyChanged("DateCreate");
					this.OnDateCreateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_idtStatus", DbType="Int NOT NULL")]
		public int idtStatus
		{
			get
			{
				return this._idtStatus;
			}
			set
			{
				if ((this._idtStatus != value))
				{
					if (this._statusGeneral.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnidtStatusChanging(value);
					this.SendPropertyChanging();
					this._idtStatus = value;
					this.SendPropertyChanged("idtStatus");
					this.OnidtStatusChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TittleTicket", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string TittleTicket
		{
			get
			{
				return this._TittleTicket;
			}
			set
			{
				if ((this._TittleTicket != value))
				{
					this.OnTittleTicketChanging(value);
					this.SendPropertyChanging();
					this._TittleTicket = value;
					this.SendPropertyChanged("TittleTicket");
					this.OnTittleTicketChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_idUserCreate", DbType="Int NOT NULL")]
		public int idUserCreate
		{
			get
			{
				return this._idUserCreate;
			}
			set
			{
				if ((this._idUserCreate != value))
				{
					this.OnidUserCreateChanging(value);
					this.SendPropertyChanging();
					this._idUserCreate = value;
					this.SendPropertyChanged("idUserCreate");
					this.OnidUserCreateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_idUsetLastPost", DbType="Int NOT NULL")]
		public int idUsetLastPost
		{
			get
			{
				return this._idUsetLastPost;
			}
			set
			{
				if ((this._idUsetLastPost != value))
				{
					this.OnidUsetLastPostChanging(value);
					this.SendPropertyChanging();
					this._idUsetLastPost = value;
					this.SendPropertyChanged("idUsetLastPost");
					this.OnidUsetLastPostChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Closed", DbType="Bit NOT NULL")]
		public bool Closed
		{
			get
			{
				return this._Closed;
			}
			set
			{
				if ((this._Closed != value))
				{
					this.OnClosedChanging(value);
					this.SendPropertyChanging();
					this._Closed = value;
					this.SendPropertyChanged("Closed");
					this.OnClosedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ticket_tickets_text", Storage="_tickets_texts", ThisKey="idTicket", OtherKey="idTicket")]
		public EntitySet<tickets_text> tickets_texts
		{
			get
			{
				return this._tickets_texts;
			}
			set
			{
				this._tickets_texts.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="statusGeneral_ticket", Storage="_statusGeneral", ThisKey="idtStatus", OtherKey="idStatus", IsForeignKey=true)]
		public statusGeneral statusGeneral
		{
			get
			{
				return this._statusGeneral.Entity;
			}
			set
			{
				statusGeneral previousValue = this._statusGeneral.Entity;
				if (((previousValue != value) 
							|| (this._statusGeneral.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._statusGeneral.Entity = null;
						previousValue.tickets.Remove(this);
					}
					this._statusGeneral.Entity = value;
					if ((value != null))
					{
						value.tickets.Add(this);
						this._idtStatus = value.idStatus;
					}
					else
					{
						this._idtStatus = default(int);
					}
					this.SendPropertyChanged("statusGeneral");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="position_ticket", Storage="_position", ThisKey="typeTicket", OtherKey="idStaff", IsForeignKey=true)]
		public position position
		{
			get
			{
				return this._position.Entity;
			}
			set
			{
				position previousValue = this._position.Entity;
				if (((previousValue != value) 
							|| (this._position.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._position.Entity = null;
						previousValue.tickets.Remove(this);
					}
					this._position.Entity = value;
					if ((value != null))
					{
						value.tickets.Add(this);
						this._typeTicket = value.idStaff;
					}
					else
					{
						this._typeTicket = default(int);
					}
					this.SendPropertyChanged("position");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_tickets_texts(tickets_text entity)
		{
			this.SendPropertyChanging();
			entity.ticket = this;
		}
		
		private void detach_tickets_texts(tickets_text entity)
		{
			this.SendPropertyChanging();
			entity.ticket = null;
		}
	}
}
#pragma warning restore 1591
